--- ccdep.pl	2016-06-30 01:44:49.000000000 +0300
+++ ccdep.pl	2016-06-30 01:45:20.000000000 +0300
@@ -5,11 +5,7 @@
 #!perl -w
 +($0=~/(.*)/s);do$1;die$@if$@;__END__+if 0;
 # Don't touch/remove lines 1--7: http://www.inf.bme.hu/~pts/Magic.Perl.Header
-
-# kill out locales such that recognising the error messages works...
-$ENV{"LC_ALL"} = "C";
-$ENV{"LANG"} = "C";
-
+#
 # ccdep.pl v0.32 -- semiautomatic dependency discovery for C/C++ programs
 # by pts@math.bme.hu at Fri May 31 13:36:29 CEST 2002
 # 0.31 by pts@math.bme.hu at Sat Jun  1 15:19:55 CEST 2002
@@ -141,13 +137,20 @@
 
 my @DS=find_ds();
 my @DSQ=map{shq$_}@DS;
-my $R="$GCCP -DOBJDEP -M -MG -E 2>&1 @DSQ";
-$R=backtick($R);
+my $DIAG=" -fno-diagnostics-show-caret";
+my $Q="$GCCP -DOBJDEP$DIAG -M -MG -E 2>&1 @DSQ";
+my $R=backtick($Q);
+if ($R=~/\berror: .*-fno-diagnostics-show-caret\b/) {
+  # gcc-4.6 and earlier don't have this flag, and they fail.
+  $Q=~s@ -fno-diagnostics-show-caret(?=\s)@@;
+  $DIAG="";
+  $R=backtick($Q);
+}
 
 if ($R!~/: warning: #warning\b/) {
   # config2.h:314:4: warning: #warning REQUIRES: c_lgcc3.o
   # Dat: g++-3.3 ignores #warning with -M -MG -E
-  $R.="\n".backtick("$GCCP -DOBJDEP -E 2>&1 >/dev/null @DSQ");
+  $R.="\n".backtick("$GCCP -DOBJDEP$DIAG -E 2>&1 >/dev/null @DSQ");
 }
 
 ## die $R;
@@ -181,8 +184,10 @@
   } elsif ($S=~/\A\s{3,}from ([^:]+)/) {
     # ^^^ gcc-3.2
     $included_from=$1;
-  } elsif ($S=~/\A([^:]+):\d+:(\d+:)? warning: #warning (NULL-PROVIDES|PROVIDES|CONFLICTS|REQUIRES):(.*)\Z/) {
+  } elsif ($S=~/\A([^:]+):\d+:(\d+:)? warning: #warning (NULL-PROVIDES|PROVIDES|CONFLICTS|REQUIRES):(.*)\Z/ or
+           $S=~/\A([^:]+):\d+:(\d+:)? warning: (NULL-PROVIDES|PROVIDES|CONFLICTS|REQUIRES):(.*)\ \[-W/) {
     # ^^^ (\d+:)? added for gcc-3.1
+    # ^^^ clang: appliers.cpp:554:6: warning: REQUIRES: out_gif.o [-W#warnings]
     # print STDERR "[$S]\n";
     my($DS,$B)=($1,$3);
     if (defined $included_from) { $DS=$included_from; undef $included_from }
@@ -230,11 +235,20 @@
   } elsif ($S=~/\A([^:]+):\d+:(\d+:)? warning: this is the location of /) {
     # ^^^ gcc-3.1
     undef $included_from;
-  } elsif ($S=~/: No such file or directory$/) {  # Depends on $ENV{LC_ALL}.
+  } elsif ($S=~/\A([^:]+):\d+:(\d+:)? warning: .*\bdeprecated\b/) {
+    # Example: /usr/include/features.h:148:3: warning: #warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE" [-Wcpp]
+    undef $included_from;
+  } elsif ($S=~/: No such file or directory$/ or  # Depends on $ENV{LC_ALL}.
+           $S=~/: fatal error: .* file not found$/) {  # clang.
     # ^^^ gcc-3.3
     undef $included_from;
   } elsif ($S eq 'compilation terminated.') {  # Useless message, ignore.
   } elsif ($S=~/^distcc\[/) {  # Useless message, ignore.
+  } elsif ($S=~/^ *#/) {  # Useless message from gcc 4.8, ignore.
+  } elsif ($S=~/^ *\^/) {  # Useless message from gcc 4.8, ignore.
+  } elsif ($S=~/: warning: treating 'c' input as/) {  # Useless message from clang, ignore.
+  } elsif ($S=~/^\d+ warnings?(?: and \d+ errors?)? generated[.]$/) {  # Useless message from clang, ignore.
+  } elsif ($S=~/^\d+ errors? generated[.]$/) {  # Useless message from clang, ignore.
   } else {
     die "$0: invalid depret: [$S]\n";
   }
